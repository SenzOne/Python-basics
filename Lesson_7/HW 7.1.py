# Реализовать класс Matrix (матрица). Обеспечить перегрузку конструктора класса (метод __init__()),
# который должен принимать данные (список списков) для формирования матрицы.
# Подсказка: матрица — система некоторых математических величин, расположенных в виде прямоугольной схемы.
# Примеры матриц вы найдете в методичке.
# Следующий шаг — реализовать перегрузку метода __str__() для вывода матрицы в привычном виде.
# Далее реализовать перегрузку метода __add__() для реализации операции сложения двух объектов класса Matrix
# (двух матриц). Результатом сложения должна быть новая матрица.
# Подсказка: сложение элементов матриц выполнять поэлементно — первый элемент первой строки первой
# матрицы складываем с первым элементом первой строки второй матрицы и т.д.

class Mareix:
    def __init__(self, data):
        self.data = data

    def __str__(self):
        return '\n' .join('\t' .join([str(itm) for itm in line]) for line in self.data)

    def __add__(self, other):
        try:
            m = [[int(self.data[line][itm]) + int(other.data[line][itm]) for itm in range(len(self.data[line]))] for
                 line in range(len(self.data))]
            return Mareix(m)
        except IndexError:
            return f'Ошиька рамешения матриц'


m_1 = [[3, 4, 32], [2, 4, 6], [-1, 64, -8]]
m_2 = [['5', '7', '23'], ['9', '23', '-54'], ['12', '3', '16']]

mtrx_1 = Mareix(m_1)
mtrx_2 = Mareix(m_2)
new_m = mtrx_1 + mtrx_2

print(mtrx_1)
print('-' * 30)
print(mtrx_2)
print('-' * 30)
print(new_m)
